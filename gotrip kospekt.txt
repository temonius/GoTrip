
reset.css 

1 вариант никак не брасывать стили
2 вариант нормализовать
3 сбросить стили в ноль

третий вариант (если проект с нуля по дизайну)

@import './reset.css';

font fascia 

список начертаний шрифтов

fonts.google.com

@import url()

body {
    font-family: 'Poppins',sans-serif;
}

figma export - графика

ctrl+d дубликат изображения

увеличиваю размер преуменьшеных картинок для карусели.

border radius 0

border radius добавляеем через css

стрелка карусели - круг мы через css наиуем а стрелочку экспортируем

выберем картинку

скругление маски в ноль

сохраняем прямоугольную маске изображения

рейтинг звезд сохраняем как изображение

названия папок /header /slider /cta (call to action)

определяю ширину контейнера

создаю под них классы

если мы посмотрим на шапку.

мы можем определить ширину контейнера

от края логотипа до края навигации

блоки вписываются в ширину 1240 px 

я буду округлять значения если по 1-2 пикселя не сходится

контейнер с каруселью должен выходить за пределы видимости

создадим котейнеры

в шапка заканчивается внизу косым треугольником.

нужно сохранить треугольник как изображение

сохранять в svg. векторная графика не потеряет в качестве.

класс 

.none {
    display:none !important
}

будет нам помогать периодически 

что бы по частям скрывать элементы

скрывать секции что бы они нас не отвлекали

заведем переменные

ширина контейнера 1240

но нужно помнить про поля слева справа по 15 и того 30

1270

:root {
    --container-width: 1270px;
    --container-padding: 15px;
    --secondary 0f1f1c
}

таким образом заводим переменные в css

:root - на самый верхний уровень

на тег html 

переменные можно переопределять на уровне селектора

текст может иметь одинаковй цвет с заголовком но иметь прозрачность

занесем этот цвет в переменную

--secondary 0f1f1c

выбираем rgba и указываем прозрачность 0.5

max-width - ширина с прицелом на адаптив
для переменных мы пишем var(переменная)

margin: 0 auto; - что бы он был по центру

.container {
    max-width: var(--container-width);
    padding: 0 var(--container-padding);
    margin: 0 auto;
    }

далее нестандартный контейнер с каруселью

создадим класс. он уходит в правую сторону

он должен начинаться как верхний но уходить вправо

мы определим место под контент с помощью padding

calc()

у нас есть 100% ширины страницы

мы знаем ширину контейнера 1270

если мы вычтем из 100% ширину контейнера

мы получим отступы которые должны быть по краям

нам нужна половина этого отступа padding

мы разделим его на 2

calc(100% - 1270 / 2)

таким образом мы получаем отступ слева

у верхнего контейнера есть падинг 15 пикселя

поэтому нижний не ровный нужно 

calc( 100% - 1270px / 2 + 15px );

обязательно делать пробелы вокруг арифметических знаков

.container-right{
padding-left:calc( 100% - 1270px/2 + 15px );
}

начинается как верхний но уходит вправо до конца


по шапке

какая разметка

большой контейнер для всей шапки 

фон градиентом

картинке через псевдоэлемент добавим

внизу треугольник переходный псевдоэлементом с svg

наложим его поверх и получится неромная граница шапки.

по тексту бейджик текст заголовок

в шапке весь контент идет внутри контейнера 

навигация в шапке и подвале повторяется.

переиспользовать (компонентный подход)

можно писать на div обертками. а можно сделать

компонентный подход.

у шапки будет минимальная высота. что бы картинка помещалась.

.header {
    min-height: 940px;
}

внутри шапки контент идет внутри контейнера

ctrl+click на фоне шапки. 

там линейный градиент

в инспекторе копируем css

из инспктора копируем css с градиентом

background: linear-gradient(132.05deg, #428E5F -17.38%, #112120 78.4%),#204434;

добавляем псевдоэлемент к header для создания неровной нижней границы header

.header:after {
    content: ""; - для оторажение
    position: absolute; - позиционирование абсолютное потому что шапка - это родитель relative
    left: 0; - левый край
    bottom:0; - нижний край
    width: 100%; - ширина 
    height: 96px; - высота картинки
    background-image: url("./../img/header/treug.svg");
    /* растянулось по всоим пропорциям aspect ratio */
}


что бы элемент не трансформировался 
добавить в svg атрибут preserveAspectRatio="none"

<svg preserveAspectRatio="none" width="1440" height="96" viewBox="0 0 1440 96" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M717.502 77.5959C673.532 77.5959 192.7 28.3523 0 0V96H1440V0C1249.3 28.3523 761.471 77.5959 717.502 77.5959Z" fill="#F6F6F6"/>
</svg>

картинку можно наложить через разметку. подтянуть. тогда высота подтянется.

но оставим так.

завестаем навигацию.

пишем разметку

создаем контейнер

    <div class="container">
        
    </div>

    но навигация будет лежать в блоке header-top 

    зачем это надо

 я описываю шапку по отдельным блокам 

 а потом эти блоки ячыйки я их наполняю.


будет header-top для навигации

будет отступ вниз 

потом header-content

а внутри я пишу навигацию и 

навигация уже не будет оталкиваться

margin будет написан на ячейках для header

создаем header__top

<header class="header">
    <div class="container">
        <div class="header__top">
            
        </div>
    </div>
</header> 

в header__top мы будем делать навигацию.


<header class="header">
    <div class="container">

        <div class="header__top">
            NAVIGATION
        </div>

        <div class="header__content">
            CONTENT
        </div>
         
    </div>
</header>



nav - навигация вся.

<header class="header">
    <div class="container">
        <div class="header__top">
            <nav> </nav>
        </div>
        <div class="header__content">

        </div>
    </div>
</header>

навигация делится на трии части logo menu signup

 <div class="nav">
                
                <div class="nav__logo">
                </div>

                <div class="nav__list">
                </div>

                <div class="nav__signup">
                </div>

</div>


навигация

эти ячейки по flexbox разбрасать. space-between что бы они в ряд выстроились

пустое пространство между ними было.

.nav {
    display: flex; - флекс
    justify-content: space-between; - выстроить в ряд
    column-gap: 80px; - растояние 80. до 80 дойдет и всё.
}

есть ячейки для блоков навигации


логотип набран текстом 

                <div class="nav__logo">
                    <h2 class="logo"><a href="#!" class="">GoTrip</a></h2>
                </div>

стилизуем логотип

.logo {
    font-size: 20px;
    
}

цвет белый прописываем в header

птому что заливка темная.


ссылки в лого должны быть такими е самыми как в logo

.logo a {
    color: inherit;
} 

навигация

                <ul class="nav__list">
                    <li><a href="#!">Home</a></li>
                    <li><a href="#!">Services</a></li>
                    <li><a href="#!">Pricing</a></li>
                    <li><a href="#!">Contact</a></li>
                </ul>

выстроить список в линию

.nav__list {
    display: flex;
}

есть отступы

.nav__list {
    display: flex;
    column-gap: 80px;
}


в макете активная ссылка подчеркнута

добавим класс active                

                <ul class="nav__list">
                    <li><a href="#!" class="active" >Home</a></li>
                    <li><a href="#!">Services</a></li>
                    <li><a href="#!">Pricing</a></li>
                    <li><a href="#!">Contact</a></li>
                </ul>

если есть ссылка и она активна. будет подчеркивание.


relative
родтельский класс. относительного него позиционированеи
.nav__list a {
    position: relative;
}


absolute - наследуемый класс.

.nav__list a.active::after,
.nav__list a:hover::after {

 content: "";
 position: absolute;
 left:0;
 bottom: -6px;
 display: block;
 width:35px;
 height:4px;
 background-color:#c4c4c4;
 border-radius: 50px;

}


кнопка 

/* Button */
будем основываться на padding

ширину и высоту я не задаю


.btn {
    display:inline-block; - по умолчанию у ссылки не работают блочные свойства
    padding: 13px 44px; - вместо ширины и высоты
    background: linear-gradient(129.54deg, #FF7B4E 15.57%, #FF584E 95.03%), #FFFFFF; - градиент
    border-radius: 100px; - скругление углов

    поработаем с текстом

    font-size: 15px;
    font-weight: 500px;


}

можно поведение по ::hover добавить

/*поведение при наведении */
.btn:hover {
color:black; /* меняет цвет */
transition:color 0.3s ease-in; /* медленно меняет цвет */
}

.btn:active {
    position: relative;
    top: 1px;
}

добавить что бы выровнять signup и login
align-items: center;


контент

бейджик заголовок текст и кнопка

классы

header__badge
header__title 
header__text 
header__btn 


в scss все это было бы в отдельных файлах

бейджик - есть тексти подложка


.header__badge {
margin-bottom:7px; - я не делаю его компонентом поэтому margin вешаю на него
display:inline-block; - размеры под содержимое
padding: 11px 30px;
font-size: 18px;
font-weight: 500;
background: rgba(255, 255, 255, 0.25);
border-radius: 15px;

}


текст
цвет белый с прозрачностью


.header__text {

margin-bottom: 68px;
font-size: 25px;
font-weight: 700;
color:rgba(255, 255, 255, 0.7);

}


добавляем картинку

что бы контент стоял рядок картинкой

объединяем контейнер для картинки и контейнер для контента в общий блок 

.header__row

и вешаем на него display flexbox

картинак в шапке может сжиматься

для испраления нужно отменить reset для картинок 

max-width: unset; - вместо 100%

.header__image img {
max-width: unset;
width: 894px;
height: 940px;
}

картинка не должна поджиматть другие блоки

поэтому задам картинке 

position absolute

а блоку header__image position relative

загнать картинку в верхний правй угол 

top 0
right 0

блок под картинкой не имеет ширины. картинка съезжяет в лево и заслонает

соседний блок


картинка в абсолюте она выпадает из потока

задать для .header__image flex-grow:1 - что бы он растягивался

нужно что бы картинка не выпадала за пределы шапки 

пропишем overflow hiden для .header тогда она не будет выпадать

дальше нужно приподнять на глаз картинку

поиграться со значением top

добавляем relative и z-index для .header__content что бы картинка не перекрывала текст

.header__content {
   /*  background-color: #f0f0f0;*/
    max-width: 592px;
    position: relative;
    z-index:1;
}


добавляем шапке класс none

шапка исчезает с экрана

можно переходить к следующему блоку


основной контент
два контейнера. один конент и слайдер

    <section class="destinations">      - секция содержимого
        <div class="conteiner-right">   - котейнер для принятия на себя отступов
            <div class="destinations_row"> - контейнер для выстраивания в ряд


            <div class="destinations__content"> - контент

            </div>
            <div class="destinations__slider"> - слайдер

            </div>
        </div>            
    </div>


    пропишем классы

    все станет на свои места

на destinations вешаем отступы. на row мы вешаем flex. отступ внутри row - column-gap вместо

padding или margin. для .destinations__content есть определенная ширина 456. max-width.

определим ширину для слайдера. он уходит за горизонт. но ширина нужна.

ширина 1110 width. на мобилках мы все это будем обрабатывать.

flex-shrink:0; позволяет не уменьшать блок слайдера. появлется прокрутка в сторону.

избавимся от scroll. на destinations повесим overflow-x hidden

таким образом слайдер уходит за горизонт но прокрутка не появляется. 


заголовок h2

                Choice Of  - поместим в <span> что отдельно стилизовать. шрифт меньше

                Destinations



слайдер
предусмотрел что одна из акртинок должна быть активной active и у нее размер будет побольше

 <div class="destinations__slider">
                <div class="slider">
                    <img class="slider__item" src="./img/slider/rec1.jpg" alt="" >
                    <img  class="slider__item active" src="./img/slider/rec2.jpg" alt="">
                    <img class="slider__item" src="./img/slider/rec3.jpg" alt="" >
                </div>
            </div>


.slider__item {
    width: 335px;
    height: 402px;
    object-fit: cover; - корректное масшаатирование изображения
    border-radius: 35px;
}

.slider__item.active {
    width: 380px;
    height: 456px;
}


сделаем это каруселью

переходим на сайт https://cdnjs.com/libraries/OwlCarousel2

копируем ссылку на jquery

копируем ссылки на теги js css theme

переходим на github OwlCarousel2 и копируем html размерку

копируем js код

подключаем код.



у нас будет обертка slider а внутри каруселью

есть api опции на github 

owl карусель простая как автомат калашникова

настроим 

опции передаются в виде объекта
нужно прописать center true что бы центральный элемент выделялся размером 
уберем класс active с картинки

$(document).ready(function(){
    $(".owl-carousel").owlCarousel({
        center:true,
        loop:true,
        margin:30,
        startPosition:2,
        items:3,
    });
  });

  в испекторе кода мы можем видеть что активная центрированная картинка получила класс center

  определим класс center

внутри слайдера есть класс .center и там .slider__item

.slider .center .slider__item {
    width: 380px;
    height: 456px;
}

добавим плавность

 transition: 0.2s ease-in; в класс .slider__item

 нужно что бы не выделеные картинки были ниже. зададим margin-top 27

 для активного .slider .center .slider__item - margin-top 0


добавим кнопки что бы управлять каруселью


                      <button class="slider__btn slider__btn--next">
                        <img src="./img/slider/Vector.svg" alt="">
                    </button>

                    <button class="slider__btn slider__btn--prev">
                        <img src="./img/slider/Vector2.svg" alt="">
                    </button>


стили

круг 68 на 68


центрируем кнопку prev

    position: absolute;
    left:27px;
    top:50%;
    transform: translateY(-50%);



пути в каталогам 

писать ./img вместо /img/

потому что / - это корень домена

закидываете на github pages и все ваши / сыпятся

./ - обозначение текущей папки

можно конечно не писать но это правило хорошего тона.


я делю отступупы между секциями распределением отступов между ними

хороший макет

нигде нет высоты строки

весь блок отзыва 490 пикс  max-width: 

класс review пригодился



следующий блок

призык к действию

он не сложный

1 определяем секцию
2 делаем контейнер
3 рисуем плашку
4 внутри плашки контент в выстраиваем в колонку 
5 заголовок описание
6 ссылка
7 на плашку вешаем нарисованые точечки через :before :after


